{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/split-logic/check-pawn-status.js","webpack:///./src/split-logic/constructor.js","webpack:///./src/split-logic/create-pawn.js","webpack:///./src/split-logic/createBoard.js","webpack:///./src/split-logic/deploy-drone.js","webpack:///./src/split-logic/drag-and-drop.js","webpack:///./src/split-logic/dyna-font.js","webpack:///./src/split-logic/end-round.js","webpack:///./src/split-logic/enemy-moves.js","webpack:///./src/split-logic/friend-or-foe.js","webpack:///./src/split-logic/health-info.js","webpack:///./src/split-logic/isSquare.js","webpack:///./src/split-logic/pawn-stats.js","webpack:///./src/split-logic/pawn-switch.js","webpack:///./src/split-logic/random-place.js","webpack:///./src/split-logic/show-health.js","webpack:///./src/split-logic/test-scripts/adj-contentID-string-array.js","webpack:///./src/split-logic/test-scripts/adj-space-finder.js","webpack:///./src/split-logic/test-scripts/best-move.js","webpack:///./src/split-logic/test-scripts/comp-turn.js","webpack:///./src/split-logic/test-scripts/goldilocks-checker.js","webpack:///./src/split-logic/test-scripts/goldilocks-constructor.js","webpack:///./src/split-logic/test-scripts/move-enemy-pawn-func.js","webpack:///./src/split-logic/test-scripts/rate-space.js","webpack:///./src/split-logic/test-scripts/touch-events.js","webpack:///./src/split-logic/test-scripts/update-percent.js","webpack:///./src/split-logic/update-pawn-status.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA,cAAc,mBAAO,CAAC,mEAA2B;AACjD;AACA,oBAAoB,mBAAO,CAAC,qEAA4B;AACxD,oBAAoB,mBAAO,CAAC,uEAA6B;AACzD,oBAAoB,mBAAO,CAAC,+FAAyC;AACrE,iBAAiB,mBAAO,CAAC,+DAAyB;AAClD,oBAAoB,mBAAO,CAAC,qEAA4B;;AAExD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED,iB;;;;;;;;;;;ACtGA,kBAAkB,mBAAO,CAAC,qDAAc;AACxC,mBAAmB,mBAAO,CAAC,uDAAe;AAC1C,sBAAsB,mBAAO,CAAC,uFAA+B;;AAE7D;AACA;;AAEA;AACA;AACA;;AAEA,6C;AACA;;AAEA,4C;AACA;AACA;AACA;;AAEA,gDAAgD;;AAEhD;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C,+BAA+B,uBAAuB;AACtD;AACA,2BAA2B,mBAAmB;AAC9C;;AAEA,SAAS;AACT,2BAA2B,mBAAmB,uBAAuB,mBAAmB;AACxF;;AAEA,SAAS;AACT,2BAA2B,mBAAmB,uBAAuB,mBAAmB;AACxF;;AAEA,gBAAgB;AAChB;AACA;AACA,0CAA0C,mBAAmB;;AAE7D,gBAAgB;AAChB;AACA;AACA,0CAA0C,mBAAmB;;AAE7D,SAAS;AACT,2BAA2B,mBAAmB,yCAAyC,mBAAmB;AAC1G,qCAAqC;;AAErC,SAAS;AACT;AACA,gCAAgC,EAAE,iCAAiC,uBAAuB,oBAAoB,SAAS;AACvH;AACA;AACA;AACA,E;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gD;;;;;;;;;;;ACfA,aAAa,mBAAO,CAAC,uDAAe;AACpC,YAAY,mBAAO,CAAC,qDAAc;;AAElC;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA,sDAAsD,SAAS;;AAE/D;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;ACvDA,iBAAiB,mBAAO,CAAC,iDAAY;AACrC,mBAAmB,mBAAO,CAAC,uDAAe;AAC1C,mBAAmB,mBAAO,CAAC,uDAAe;AAC1C,kBAAkB,mBAAO,CAAC,qDAAc;;AAExC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,gBAAgB;AACvC;;AAEA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,gBAAgB;AAC3C;AACA;;AAEA;AACA;AACA,+BAA+B,YAAY,IAAI,YAAY;AAC3D;AACA;AACA;AACA;;AAEA,sDAAsD;;AAEtD;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,E;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,YAAY;AACZ;;AAEA,YAAY;AACZ;;AAEA,eAAe;AACf;AACA;;;AAGA;AACA;AACA;;AAEA,QAAQ;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA,QAAQ;;AAER;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+EAA+E,gBAAgB;AAC/F;AACA;;AAEA;;AAEA,kEAAkE;AAClE,wEAAwE;AACxE,mDAAmD;AACnD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA,eAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,E;;;;;;;;;;;AC/HA,YAAY,mBAAO,CAAC,qDAAc;AAClC,mBAAmB,mBAAO,CAAC,qEAAsB;;AAEjD;AACA;AACA,CAAC,GAAG,mBAAO,CAAC,uDAAe;;AAE3B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8EAA8E,gBAAgB;AAC9F;AACA;;AAEA;;AAEA,oEAAoE;AACpE,0EAA0E;AAC1E,qDAAqD;AACrD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA,K;;;;;;;;;;;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kBAAkB;AACpD;;AAEA;AACA;;AAEA;AACA,E;;;;;;;;;;;ACvBA,kBAAkB,mBAAO,CAAC,qDAAc;AACxC,uBAAuB,mBAAO,CAAC,2FAAiC;AAChE,wBAAwB,mBAAO,CAAC,mEAAqB;AACrD,0BAA0B,mBAAO,CAAC,+FAAmC;AACrE,iBAAiB,mBAAO,CAAC,6EAA0B;;AAEnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,0CAA0C;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA,E;;;;;;;;;;;ACjDA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,kDAAkD,aAAa,IAAI,aAAa;AAChF;AACA;AACA;;AAEA,2BAA2B,wBAAwB;;AAEnD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB,gEAAgE,aAAa,oBAAoB,cAAc;AAC/G;AACA;;AAEA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB,gEAAgE,aAAa,oBAAoB,cAAc;AAC/G;AACA;;AAEA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;AC7GA,YAAY,mBAAO,CAAC,qDAAc;AAClC,aAAa,mBAAO,CAAC,uDAAe;;AAEpC;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA,iBAAiB;;AAEjB,mCAAmC,sCAAsC;;AAEzE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,mCAAmC,sCAAsC;;AAEzE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,8CAA8C,cAAc;AAC5D;;AAEA;AACA;AACA;AACA,E;;;;;;;;;;;ACvGA,YAAY,mBAAO,CAAC,qDAAc;AAClC,aAAa,mBAAO,CAAC,uDAAe;AACpC,WAAW,mBAAO,CAAC,mDAAa;;AAEhC,0C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA,2DAA2D,eAAe;;AAE1E;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,oDAAoD;AACpD;AACA,sBAAsB,sBAAsB;AAC5C;AACA;;AAEA;AACA;AACA;AACA,wC;;AAEA;AACA;AACA,iEAAiE;AACjE,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;ACvDA;AACA;AACA,M;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,E;;;;;;;;;;;AC1BA,yBAAyB,mBAAO,CAAC,qEAAsB;;AAEvD;AACA;AACA;AACA;;AAEA,8CAA8C,SAAS;;AAEvD;AACA,oCAAoC,SAAS;AAC7C,+CAA+C;AAC/C;AACA;AACA,iCAAiC,SAAS;;AAE1C;;AAEA,+DAA+D,SAAS;AACxE,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA,iCAAiC,SAAS;;AAE1C;AACA;;;AAGA;;;;AAIA,KAAK;AACL;AACA,iCAAiC,SAAS;;AAE1C;AACA;;AAEA,KAAK;AACL;AACA,iCAAiC,SAAS;;AAE1C;AACA;;AAEA,KAAK;AACL;AACA,iCAAiC,SAAS;;AAE1C;AACA;AACA;AACA;;AAEA;AACA;AACA,mD;;;;;;;;;;;ACxEA,YAAY,mBAAO,CAAC,qDAAc;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sCAAsC,gBAAgB,IAAI,gBAAgB;AAC1E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;AACT,8BAA8B;AAC9B;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;AClEA,YAAY,mBAAO,CAAC,qDAAc;;AAElC;AACA;;AAEA,iDAAiD;AACjD;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;AC3BA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B,gBAAgB;AAC1C,8BAA8B,gBAAgB;AAC9C;AACA;;;AAGA;;AAEA,mBAAmB,cAAc;AACjC,wCAAwC;;AAExC,uBAAuB,cAAc;AACrC,4CAA4C;AAC5C;AACA,oCAAoC,QAAQ,IAAI,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE,iBAAiB;AACjB,sCAAsC,UAAU,MAAM,mBAAmB;AACzE,oDAAoD;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,E;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,4DAAkB;AAC9C,8BAA8B,mBAAO,CAAC,kGAA8B;AACpE,0BAA0B,mBAAO,CAAC,kFAAsB;;;AAGxD;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,mBAAmB,qBAAqB;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sD;;;;;;;;;;;ACtFA;AACA;AACA;;AAEA;;AAEA,mBAAmB,yBAAyB;;AAE5C;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;ACxBA,kBAAkB,mBAAO,CAAC,sDAAe;AACzC,iBAAiB,mBAAO,CAAC,gEAAa;AACtC,uBAAuB,mBAAO,CAAC,8EAAoB;AACnD,0BAA0B,mBAAO,CAAC,sFAAwB;;AAE1D;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,0BAA0B,6CAA6C;AACvE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC,sCAAsC;AACtE,oDAAoD;AACpD;;AAEA;AACA;AACA;;AAEA,6BAA6B,sCAAsC;AACnE;AACA,gEAAgE,+BAA+B;;AAE/F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sJAAsJ;AACtJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uDAAuD;AACvD;;AAEA,KAAK;AACL,uCAAuC,aAAa;AACpD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;;;;;ACtIA,mBAAmB,mBAAO,CAAC,wDAAgB;AAC3C,mBAAmB,mBAAO,CAAC,0FAA0B;AACrD,kBAAkB,mBAAO,CAAC,kEAAc;AACxC,kBAAkB,mBAAO,CAAC,sDAAe;;AAEzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,eAAe,IAAI,eAAe;AAClF;AACA;AACA;AACA,wBAAwB,SAAS,SAAS;AAC1C,qBAAqB,gCAAgC;AACrD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,wDAAwD;AACxD,2DAA2D;;AAE3D,aAAa;AACb;AACA;;AAEA,aAAa;AACb;AACA;AACA,6DAA6D;AAC7D,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wBAAwB,gCAAgC;AACxD;AACA,8BAA8B,SAAS,WAAW,0BAA0B;AAC5E,YAAY;AACZ,8BAA8B,SAAS,iBAAiB,0BAA0B;AAClF;AACA;;AAEA;AACA,gDAAgD;AAChD,iDAAiD;;;AAGjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,qCAAqC;AAC/F,yDAAyD,oCAAoC;AAC7F,0DAA0D,qCAAqC;AAC/F;AACA;;AAEA,qBAAqB;AACrB,E;;;;;;;;;;;ACnHA,kBAAkB,mBAAO,CAAC,kEAAc;;AAExC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;ACnBA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,kEAAkE,gBAAgB;AAClF;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,E;;;;;;;;;;;ACjCA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,E;;;;;;;;;;;ACTA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8EAA8E,gBAAgB;AAC9F;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL,E;;;;;;;;;;;ACjGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;ACvBA,YAAY,mBAAO,CAAC,qDAAc;;AAElC;AACA,iEAAiE,OAAO;AACxE;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kDAAkD;AAClD;;AAEA;AACA;;AAEA,2BAA2B,6BAA6B;;AAExD;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,kCAAkC,mBAAmB;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,wBAAwB;AACnD;AACA,2CAA2C,OAAO,WAAW;AAC7D,wDAAwD,mBAAmB;;AAE3E;AACA,2DAA2D,mBAAmB;AAC9E;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA;AACA,2BAA2B,uBAAuB;AAClD;AACA,0CAA0C,OAAO,WAAW;AAC5D,uDAAuD,kBAAkB;;AAEzE;AACA,0DAA0D,kBAAkB;AAC5E;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA;AACA,2BAA2B,wBAAwB;AACnD;AACA,2CAA2C,OAAO,WAAW;AAC7D,wDAAwD,mBAAmB;;AAE3E;AACA,2DAA2D,mBAAmB;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","// isAdjacent = require(\"./split-logic/isAdjacent\");\r\ncreateBoard = require(\"./split-logic/createBoard\");\r\ncounter = 0;\r\nconst randomPlace = require(\"./split-logic/random-place\");\r\nconst dragAndDrop = require(\"./split-logic/drag-and-drop\");\r\nconst touchEvents = require(\"./split-logic/test-scripts/touch-events\");\r\nconst endRound = require(\"./split-logic/end-round\");\r\nconst deployDrone = require(\"./split-logic/deploy-drone\");\r\n\r\nvar randBtn = document.getElementById(\"create-pawn\");\r\nvar endRoundBtn = document.getElementById(\"end-round\");\r\n\r\n// set the local storage to client gameboard size:\r\nvar getTestNum = document.getElementById(\"test-nums\");\r\nvar startBtn = document.getElementById(\"submit-test-num\");\r\nvar acc = document.getElementsByClassName(\"accordion\");\r\n\r\n// disable all console messages:\r\n// console.log = function () {};\r\n\r\nfor (let i = 0; i < acc.length; i++) {\r\n    acc[i].addEventListener(\"click\", function () {\r\n        this.classList.toggle(\"active\");\r\n        var panel = this.nextElementSibling;\r\n        if (panel.style.maxHeight) {\r\n            panel.style.maxHeight = null;\r\n        } else {\r\n            panel.style.maxHeight = panel.scrollHeight + \"px\";\r\n        };\r\n    });\r\n};\r\n\r\nstartBtn.addEventListener(\"click\", function () {\r\n    console.log(\"startBtn 'click' function fires\");\r\n\r\n    // test fullscreen mode:\r\n    document.documentElement.webkitRequestFullScreen();\r\n\r\n    console.log(getTestNum.value);\r\n    userNum = getTestNum.value;\r\n    localStorage.setItem(\"boardSize\", userNum);\r\n\r\n    if (startBtn.style.display === \"block\") {\r\n        startBtn.style.display = \"none\";\r\n    } else {\r\n        startBtn.style.display = \"block\";\r\n    };\r\n\r\n    if (getTestNum.style.display === \"block\") {\r\n        getTestNum.style.display = \"none\";\r\n    } else {\r\n        getTestNum.style.display = \"block\";\r\n    };\r\n    \r\n    if (randBtn.style.display === \"block\") {\r\n        randBtn.style.display = \"none\";\r\n    } else {\r\n        randBtn.style.display = \"block\";\r\n    };\r\n\r\n    createBoard(userNum);\r\n});\r\n\r\nrandBtn.addEventListener(\"click\", function () {\r\n    console.log(\"randBtn 'click' function fires\");\r\n\r\n    // TODO: create a function to read user local storage?\r\n    storedUserNum = localStorage.getItem(\"boardSize\");\r\n\r\n    let rootNum = Math.sqrt(storedUserNum);\r\n    console.log(\"rootNum\");\r\n    console.log(rootNum);\r\n\r\n    if (randBtn.style.display === \"block\") {\r\n        randBtn.style.display = \"none\";\r\n    } else {\r\n        randBtn.style.display = \"block\";\r\n    };\r\n\r\n    if (endRoundBtn.style.display === \"block\") {\r\n        endRoundBtn.style.display = \"none\";\r\n    } else {\r\n        endRoundBtn.style.display = \"block\";\r\n    };\r\n////////////////////////////////////////////////////////////////\r\n    \r\n\r\n    // TODO: create a variable to be passed in as an argument (below is for testing ONLY):\r\n    randomPlace(rootNum, rootNum - 1);\r\n    // randomPlace(rootNum, rootNum - 1, \"zombie\");\r\n    // randomPlace(rootNum, rootNum - 1, \"cyborg\");\r\n    dragAndDrop();\r\n    touchEvents();\r\n\r\n    deployDrone();\r\n});\r\n\r\nendRoundBtn.addEventListener(\"click\", function () {\r\n    console.log(\"endRoundBtn 'click' function fires\");\r\n    endRound();\r\n});\r\n\r\n// dragAndDrop();","const pawnStats = require(\"./pawn-stats\");\r\nconst pawnSwitch = require(\"./pawn-switch\");\r\nconst updatePercent = require(\"./test-scripts/update-percent\");\r\n\r\nmodule.exports = checkPawnStatus = function (pawnType, pawnTypeTotal) {\r\n    console.log(\"checkPawnStatus function fires\");\r\n\r\n    // pawnTypeArr = [\"human\", \"zombie\", \"cyborg\"];\r\n    // TODO: Add 2 more pawn types after adding to create-pawn.js file:\r\n    // pawnTypeArr = [\"human\", \"zombie\", \"cyborg\", \"sleeping-zombie\", \"sleepy-cyborg\"];\r\n\r\n    console.log(\"pawnType before for loop:\"); \r\n    console.log(pawnType);\r\n\r\n    let pawnStat_Type = pawnStats[pawnType]; \r\n    let allPawnSpawn = pawnStat_Type.pawnSpawn;\r\n    console.log(\"allPawnSpawn[0]\");\r\n    console.log(allPawnSpawn[0]);\r\n\r\n    // allPawnSpawn = pawnStats.human.pawnSpawn; // <<<<< TESTING ONLY\r\n\r\n    // TODO: create an if(\"human\") do the following...\r\n    // then create for the other races/classes:\r\n\r\n    for (let i = 0; i < allPawnSpawn.length; i++) {\r\n        console.log(`health: ${allPawnSpawn[i].health}`);\r\n        if (allPawnSpawn[i].health >= 20 && allPawnSpawn[i].health <= 80 && pawnType == \"hazmat-human\") {\r\n            console.log(`${allPawnSpawn[i].id} is still HUMAN...for now!`);\r\n            pawnSwitch(allPawnSpawn[i].id, \"human\");\r\n        \r\n        } else if (allPawnSpawn[i].health >= -40 && allPawnSpawn[i].health < 20 && pawnType == \"human\") {\r\n            console.log(`${allPawnSpawn[i].id} is no longer human! ${allPawnSpawn[i].id} joins ZOMBIE HORDE!`);\r\n            pawnSwitch(allPawnSpawn[i].id, \"zombie\");\r\n        \r\n        } else if (allPawnSpawn[i].health > 80 && allPawnSpawn[i].health <= 140 && pawnType == \"human\") {\r\n            console.log(`${allPawnSpawn[i].id} is no longer human! ${allPawnSpawn[i].id} joins CYBORG REVOLT!`);\r\n            pawnSwitch(allPawnSpawn[i].id, \"cyborg\");\r\n            \r\n            // } else if (allPawnSpawn[i].health > 0 && allPawnSpawn[i].health < 20) {\r\n            // pawnSwitch(allPawnSpawn[i].id, \"sleepy-zombie\", \"cyborg\");\r\n            // TODO: add sleepy-zombie here!\r\n            //     console.log(`ALERT!!! {allPawnSpawn[i].id} is barely human!`);\r\n            \r\n            // } else if (allPawnSpawn[i].health > 80 && allPawnSpawn[i].health < 100) {\r\n            // pawnSwitch(allPawnSpawn[i].id, \"sleepy-cyborg\");\r\n            // TODO: add sleepy-cyborg here!\r\n            //     console.log(`ALERT!!! {allPawnSpawn[i].id} is barely human!`);\r\n        \r\n        } else if (allPawnSpawn[i].health < -40 || allPawnSpawn[i].health > 140) {\r\n            console.log(`${allPawnSpawn[i].id} is beyond the reach of the NANITES... ${allPawnSpawn[i].id} has been eliminated!`);\r\n            pawnSwitch(\"permafrost\"); // TODO: they don't move and potentially block movement and shield attacks from enemies;\r\n        \r\n        } else {\r\n            console.log(\"a calculation error has occurred\");\r\n            console.log(`i is ${i} and allPawnSpawn[i].health is ${allPawnSpawn[i].health} and  pawnType is ${pawnType}`);\r\n        };\r\n    };\r\n    updatePercent(pawnTypeTotal);\r\n};","module.exports = function Square(x, y, goldilocks) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.goldilocks = goldilocks;\r\n};\r\n\r\n// Class D (planetoid or moon with little to no atmosphere)\r\n// Class H (generally uninhabitable)\r\n// Class J (gas giant)\r\n// Class K (habitable, as long as pressure domes are used)\r\n// Class L (marginally habitable, with vegetation but no animal life)\r\n// Class M (terrestrial)\r\n// Class N (sulfuric)\r\n// Class R (a rogue planet, not as habitable as a terrestrial planet)\r\n// Class T (gas giant)\r\n// Class Y (toxic atmosphere, high temperatures)","healthInfo = require(\"./health-info\");\r\npawnStats = require(\"./pawn-stats\");\r\n\r\nmodule.exports = createPawn = function (destinationID, pawnCounter, pawnType) {\r\n    console.log(\"createPawn function fires\");\r\n    // add type of pawn (\"human\", \"zombie\", \"cyborg\"), then create if statement below:\r\n\r\n    squarePlace = document.getElementById(destinationID);\r\n\r\n    if (squarePlace.classList.contains(\"empty-space\")) {\r\n        // squarePlace.classList.add(\"circle-shape\");\r\n\r\n        // create game piece div:\r\n        gamePawn = document.createElement(\"img\");\r\n        pawnId = `pawn-${pawnCounter}`;\r\n        gamePawn.setAttribute(\"id\", pawnId);\r\n        squarePlace.appendChild(gamePawn);\r\n        newPawn = document.getElementById(pawnId);\r\n        newPawn.classList.add(\"circle-shape\");\r\n        newPawn.classList.add(`${pawnType}-pawn`);\r\n        newPawn.classList.add(`pawn`);\r\n        newPawn.setAttribute(\"src\", `/assets/images/${pawnType}-pawn.png`);\r\n\r\n        // append health-score circle:\r\n        // TODO: // create div to hold health score when pawn is placed there:\r\n\r\n        // push pawns into pawnStats:\r\n        if (pawnType == \"human\") {\r\n            health = 50;\r\n        } else if (pawnType == \"zombie\") {\r\n            health = -10;\r\n        } else if (pawnType == \"cyborg\") {\r\n            health = 110;\r\n        } else {\r\n            console.log(\"pawnType doesn't exist yet\");\r\n        }\r\n        pawnStats[pawnType].pawnSpawn.push({\r\n            // [pawnId]: {\r\n            id: pawnId,\r\n            health: health,\r\n            loc: [destinationID]\r\n\r\n\r\n             // TODO: need to add dynamic value to set enemy pawns\r\n            // }\r\n        });\r\n\r\n        healthInfo(pawnType, pawnId);\r\n\r\n        pawnStats.pawnCounter = pawnCounter + 1;\r\n        console.log(pawnStats);\r\n        // return pawnStats;\r\n    } else {\r\n        console.log(\"destination space is full\");\r\n    }\r\n};\r\n\r\n\r\n","const isSquare = require(\"./isSquare\");\r\nconst MakeSquare = require(\"./constructor\");\r\nconst createPawn = require(\"./create-pawn\");\r\nconst pawnStats = require(\"./pawn-stats\");\r\n\r\nmodule.exports = createBoard = function (numberOfSpaces) {\r\n\r\n    if (isSquare(numberOfSpaces)) {\r\n        boardHolder = document.getElementById(\"board-holder\");\r\n        console.log(\"numberOfSpaces is square\");\r\n        let gameBoard = [];\r\n        baseNum = 1000;\r\n        console.log(\"square root of \" + numberOfSpaces);\r\n        sqRootNum = Math.sqrt(numberOfSpaces);\r\n        console.log(sqRootNum);\r\n\r\n        // create constructor object:\r\n        for (let i = 1; i <= sqRootNum; i++) {\r\n            // create a row (# based on sqRootNum), then append new divs (# based on sqRootNum):\r\n\r\n            // create rows:\r\n            newRow = document.createElement(\"div\");\r\n            rowID = `row-${i}`;\r\n            newRow.setAttribute(\"id\", rowID);\r\n            boardHolder.appendChild(newRow);\r\n            boardRow = document.getElementById(rowID);\r\n            boardRow.setAttribute(\"class\", \"row\");\r\n            // newRow.setAttribute(\"class\", \"row\").setAttribute(\"id\", rowID);\r\n            // TODO: reduce line below by adding setAttribute on same line as above?\r\n\r\n            for (let j = 1; j <= sqRootNum; j++) {\r\n                let square = new MakeSquare(baseNum + j, baseNum + i, Math.floor(Math.random() * 10) + 1);\r\n                gameBoard.push(square);\r\n\r\n                // create divs in rows:\r\n                squareDiv = document.createElement(\"div\");\r\n                squareId = `x${baseNum + j}-y${baseNum + i}`;\r\n                squareDiv.setAttribute(\"id\", squareId);\r\n                boardRow.appendChild(squareDiv);\r\n                newSquare = document.getElementById(squareId);\r\n                newSquare.classList.add(\"dyna-square\");\r\n\r\n                // pawnStats.gameBoard.push(squareId);`\r\n\r\n                // divide the size of squares evenly:\r\n                percentageSize = 1/sqRootNum * 100;\r\n                console.log(percentageSize);\r\n                newSquare.style.width = `${percentageSize}%`;\r\n                /////////////////////////////////////////////\r\n                squareHeight = 200;\r\n                contentInSquareDiv = document.createElement(\"div\");\r\n                contentId = `content-${squareId}`;\r\n                contentInSquareDiv.setAttribute(\"id\", contentId);\r\n                newSquare.appendChild(contentInSquareDiv);\r\n                newContentSquare = document.getElementById(contentId);\r\n                newContentSquare.classList.add(\"dyna-square-content\");\r\n                newContentSquare.classList.add(\"empty-space\");\r\n                pawnStats.gameBoard.push(contentId);\r\n\r\n\r\n            };\r\n        };\r\n\r\n        // TODO: squareOne = {\r\n        //     x: 1000, // only change place value for the zeroes\r\n        //     y: 1000 // if greater than 1999, then too many squares?\r\n        // };\r\n        console.log(\"gameBoard\");\r\n        console.log(gameBoard);\r\n\r\n    } else {\r\n        if (numberOfSpaces < 9) {\r\n            console.log(\"numberOfSpaces is NOT >= 9\");\r\n        } else {\r\n            console.log(\"numberOfSpaces is NOT square\");\r\n        };\r\n    };\r\n\r\n    // TODO: create a counter function or object to hold number of pawns (created, destroyed, limits, transfers using pawn id):\r\n};","\r\n\r\nmodule.exports = deployDrone = function () {\r\n    console.log(/* Event fired on the drag target */\"?empty\");\r\n    // document.addEventListener(\"dragstart\", function (event) {\r\n    //     console.log(\"event.target\");\r\n    //     console.log(event.target);\r\n    //     console.log(\"event.target.id\");\r\n    //     console.log(event.target.id);\r\n\r\n    //     event.dataTransfer.setData(\"Text\", event.target.id);\r\n    //     holdingPawn = true;\r\n    //     currentDroneSelected = event.target.id;\r\n\r\n    //     let holdingClass = document.getElementById(currentDroneSelected);\r\n        \r\n    //     if (currentDroneSelected == \"bio-nanite-drone-btn\") {\r\n    //         console.log(\"bio-nanite-drone-btn selected\");\r\n\r\n    //     } else if (currentDroneSelected == \"bio-hazard-drone-btn\") {\r\n    //         console.log(\"bio-hazard-drone-btn selected\");\r\n\r\n    //     } else if (currentDroneSelected == \"bio-flare-drone-btn\") {\r\n    //         console.log(\"bio-flare-drone-btn selected\");\r\n\r\n    //     // } else if (currentDroneSelected == \"bio-nanite-drone-btn\") {\r\n    //     //     console.log(\"bio-nanite-drone-btn selected\");\r\n    //     };\r\n\r\n\r\n    //     holdingClass.classList.add(\"holding\");\r\n    //     parentDiv = document.getElementById(currentDroneSelected).parentNode;\r\n    //     parentDiv.classList.add(\"parent-holding-pawn\");\r\n\r\n    // });\r\n\r\n    // // Events fired on the drop target:\r\n    // draggedEventTarget = \"\";\r\n    // document.addEventListener(\"dragover\", function (event) {\r\n    //     event.preventDefault();\r\n    //     console.log(\"dragover\");\r\n    //     if (event.target.classList.contains(\"empty-space\")) {\r\n    //         event.target.classList.add(\"available\");\r\n    //         draggedEventTarget = event.target;\r\n    //         console.log(\"draggedEventTarget\");\r\n    //         console.log(draggedEventTarget);\r\n    //     };\r\n    // });\r\n\r\n    // document.addEventListener(\"dragend\", function (event) {\r\n    //     console.log(\"dragend\");\r\n    //     draggedEventTarget.classList.remove(\"available\");\r\n    // });\r\n\r\n    // document.addEventListener(\"drop\", function (event) {\r\n    //     event.preventDefault();\r\n\r\n    //     // if (event.target.classList.contains(\"empty-space\")) {\r\n    //     //     // var data = event.dataTransfer.getData(\"Text\");\r\n    //     //     // holdingClass = document.getElementById(currentPawnHeld);\r\n    //     //     // event.target.appendChild(holdingClass);\r\n    //     //     // holdingClass.classList.remove(\"holding\");\r\n    //     //     // event.target.classList.remove(\"empty-space\");\r\n    //     //     // parentDiv.classList.remove(\"parent-holding-pawn\");\r\n    //     //     // parentDiv.classList.add(\"empty-space\");\r\n    //     //     // holdingPawn = false;\r\n\r\n    //     //     /////////////////////////////////////////////////////\r\n    //     //     // contentCircle = document.getElementById(`content-health-${currentPawnHeld}`);\r\n    //     //     // event.target.appendChild(contentCircle);\r\n    //     //     /////////////////////////////////////////////////////\r\n\r\n    //     //     // [pawnType].pawnSpawn\r\n\r\n    //     //     // var newSpan = document.createElement(\"span\"); // Create span node\r\n    //     //     // var textnode = document.createTextNode(pawnStats.); // Create a text node\r\n    //     //     // newSpan.appendChild(textnode); // Append the text to <li>\r\n    //     //     // document.getElementById(\"myList\").appendChild(newSpan);\r\n\r\n    //     //     /////////////////////////////////////////////////////\r\n\r\n    //     //     currentPawnHeld = \"\";\r\n\r\n    //     //     console.log(\"parentDiv\");\r\n    //     //     console.log(parentDiv);\r\n    //     //     console.log(\"parentDiv.id\");\r\n    //     //     console.log(parentDiv.id);\r\n\r\n\r\n\r\n    //     //     // squarePlace.classList.remove(\"empty-space\");\r\n    //     //     console.log(\"contentCornerHealth\");\r\n    //     //     console.log(contentCornerHealth);\r\n\r\n    //     //     // healthInfo(pawnType, pawnId);\r\n\r\n    //     //     /////////////////////////////////////////////////////\r\n\r\n    //     // } else if (event.target.className == \"discard-pile\" || event.target.className == \"discard\") {\r\n\r\n    //     //     // data = event.dataTransfer.getData(\"Text\");\r\n    //     //     // console.log(\"data\");\r\n    //     //     // console.log(data);\r\n\r\n    //     //     holdingClass = document.getElementById(currentPawnHeld);\r\n    //     //     event.target.appendChild(holdingClass);\r\n    //     //     holdingClass.src = \"../assets/images/obverse.png\";\r\n    //     //     holdingClass.classList.remove(\"flipped\");\r\n    //     //     holdingClass.classList.remove(\"card-face\");\r\n    //     //     holdingClass.classList.add(\"discard\");\r\n    //     //     holdingClass.classList.remove(\"holding\");\r\n    //     //     parentDiv.classList.remove(\"parent-holding-pawn\");\r\n    //     //     parentDiv.classList.add(\"empty-space\");\r\n    //     //     holdingPawn = false;\r\n    //     //     currentPawnHeld = \"\";\r\n\r\n    //     // } else if (event.target.classList.contains(\"empty-space\") == false) {\r\n    //     //     console.log(\"this slot is full\");\r\n    //     // } else {\r\n    //     //     holdingClass.classList.remove(\"holding\");\r\n    //     //     parentDiv.classList.remove(\"parent-holding-pawn\");\r\n    //     //     parentDiv.classList.remove(\"empty-space\");\r\n    //     //     holdingPawn = false;\r\n    //     //     currentPawnHeld = \"\";\r\n    //     // };\r\n    //     console.log(\"dropped\");\r\n    // });\r\n};","pawnStats = require(\"./pawn-stats\");\r\nupdatePawnStatus = require(\"./update-pawn-status\");\r\n\r\nconst {\r\n    healthInfo\r\n} = require(\"./health-info\");\r\n\r\nmodule.exports = dragAndDrop = function () {\r\n    console.log(\"dragAndDrop function fires\");\r\n\r\n    var currentPawnHeld = null;\r\n\r\n    /* Event fired on the drag target */\r\n    // document.addEventListener(\"dragstart\", dragStart);\r\n    dragStart = function (event) {\r\n        if (event.target.classList.contains(\"human-pawn\")) {\r\n            event.dataTransfer.getData(\"Text\", event.target.id);\r\n            holdingPawn = true;\r\n            currentPawnHeld = event.target.id;\r\n\r\n            let holdingClass = document.getElementById(currentPawnHeld);\r\n            holdingClass.classList.add(\"holding\");\r\n            parentDiv = document.getElementById(currentPawnHeld).parentNode;\r\n            parentDiv.classList.add(\"parent-holding-pawn\");\r\n        } else {\r\n            event.target.removeEventListener(\"dragstart\", dragStart);\r\n            // document.getElementById(\"myDIV\").\r\n            // document.getElementById(\"myDIV\").removeEventListener(\"mousemove\", myFunction);\r\n        };\r\n\r\n        // });\r\n    };\r\n    document.addEventListener(\"dragstart\", dragStart);\r\n\r\n    var holdingPawn = false;\r\n    var holdingClass = null;\r\n    var parentDiv = null;\r\n    var counterValue = 0;\r\n\r\n    // Events fired on the drop target:\r\n    document.addEventListener(\"dragover\", function (event) {\r\n        event.preventDefault();\r\n        console.log(\"dragover\");\r\n        console.log(\"holdingPawn: \" + holdingPawn);\r\n        console.log(counterValue);\r\n        counterValue++;\r\n\r\n        // // while (holdingPawn == true) {\r\n        // while (holdingPawn == \"placeHolder\") {\r\n        //     // setInterval(() => {\r\n        //     console.log(\"while loop\");\r\n        //     mouseEnterFunc();\r\n        // };\r\n    });\r\n\r\n    document.addEventListener(\"drop\", function (event) {\r\n        event.preventDefault();\r\n\r\n        console.log(\"currentPawnHeld\");\r\n        console.log(currentPawnHeld);\r\n\r\n        if (currentPawnHeld != null) {\r\n            if (document.getElementById(currentPawnHeld).classList.contains(\"human-pawn\")) {\r\n                console.log(\"currentPawnHeld = human-pawn\");\r\n\r\n                if (event.target.classList.contains(\"empty-space\")) {\r\n                    // var data = event.dataTransfer.setData(\"Text\");\r\n                    holdingClass = document.getElementById(currentPawnHeld);\r\n                    event.target.appendChild(holdingClass);\r\n                    holdingClass.classList.remove(\"holding\");\r\n                    event.target.classList.remove(\"empty-space\");\r\n                    parentDiv.classList.remove(\"parent-holding-pawn\");\r\n                    parentDiv.classList.add(\"empty-space\");\r\n                    holdingPawn = false;\r\n\r\n                    /////////////////////////////////////////////////////\r\n                    contentCircle = document.getElementById(`content-health-${currentPawnHeld}`);\r\n                    event.target.appendChild(contentCircle);\r\n                    /////////////////////////////////////////////////////\r\n\r\n                    // [pawnType].pawnSpawn\r\n\r\n                    // var newSpan = document.createElement(\"span\"); // Create span node\r\n                    // var textnode = document.createTextNode(pawnStats.); // Create a text node\r\n                    // newSpan.appendChild(textnode); // Append the text to <li>\r\n                    // document.getElementById(\"myList\").appendChild(newSpan);\r\n\r\n                    /////////////////////////////////////////////////////\r\n                    newParentDiv_ID = event.target.id;\r\n                    console.log(\"newParentDiv_ID\");\r\n                    console.log(newParentDiv_ID);\r\n\r\n                    updatePawnStatus(\"location\", currentPawnHeld, newParentDiv_ID);\r\n                    currentPawnHeld = null;\r\n\r\n                    console.log(\"parentDiv\");\r\n                    console.log(parentDiv);\r\n                    console.log(\"parentDiv.id\");\r\n                    console.log(parentDiv.id);\r\n                    console.log(\"contentCornerHealth\");\r\n                    console.log(contentCornerHealth);\r\n\r\n                    /////////////////////////////////////////////////////\r\n\r\n                } else if (event.target.classList.contains(\"empty-space\") == false) {\r\n                    console.log(\"this slot is full\");\r\n                } else {\r\n                    holdingClass.classList.remove(\"holding\");\r\n                    parentDiv.classList.remove(\"parent-holding-pawn\");\r\n                    parentDiv.classList.remove(\"empty-space\");\r\n                    holdingPawn = false;\r\n                    currentPawnHeld = null;\r\n                };\r\n            } else {\r\n                console.log(\"currentPawnHeld not human-pawn\");\r\n            };\r\n        };\r\n    });\r\n};\r\n// };","// pixelSize = 16;\r\n// module.exports = dynaFont = function (inputVal) {\r\n//     // preResult = Math.floor(Math.sqrt(inputVal) / 10 * pixelSize);\r\n//     preResult = Math.floor(Math.sqrt(inputVal) / 10 * pixelSize);\r\n//     result = pixelSize - preResult;\r\n//     console.log(result);\r\n// };\r\n// ////////////////////////////////////////////////////////////\r\n\r\n// inputVal = 9;\r\nmodule.exports = dynaFont = function (inputVal) {\r\n    // preResult = Math.floor(Math.sqrt(inputVal) / 10 * pixelSize);\r\n    preResult = Math.sqrt(inputVal);\r\n    percentageSizeBox = 1 / preResult * 100;\r\n    console.log(\"percentageSizeBox\");\r\n    console.log(percentageSizeBox);\r\n    // newSquare.style.width = `${percentageSizeBox}%`;\r\n    pixelSize = percentageSizeBox / 4;\r\n\r\n    result = pixelSize;\r\n    console.log(result);\r\n\r\n    return result;\r\n};","const pawnStats = require(\"./pawn-stats\");\r\nconst adjacentSpaces = require(\"./test-scripts/adj-space-finder\");\r\nconst checkPawnStatus = require(\"./check-pawn-status\");\r\nconst goldilocksChecker = require(\"./test-scripts/goldilocks-checker\");\r\nconst nextTurn = require(\"./test-scripts/comp-turn\");\r\n\r\nmodule.exports = endRound = function () {\r\n    let pawnType = \"\";\r\n    let pawnTypeArr = [];\r\n    let pawnTypeTotal = {};\r\n\r\n    for (pawnType in pawnStats) {\r\n        console.log(\"pawnType\");\r\n        console.log(pawnType);\r\n        console.log(\"pawnStats[pawnType]\");\r\n        console.log(pawnStats[pawnType]);\r\n        if (\r\n            pawnType === \"cyborg\" ||\r\n            pawnType === \"human\" ||\r\n            pawnType === \"zombie\"\r\n        ) {\r\n\r\n            for (let i = 0; i < pawnStats[pawnType].pawnSpawn.length; i++) {\r\n                console.log(\"pawnStats[pawnType]::\");\r\n                console.log(pawnStats[pawnType]);\r\n                console.log(pawnStats[pawnType].pawnSpawn);\r\n                console.log(pawnStats[pawnType].pawnSpawn[i]);\r\n                let pawnLoc = pawnStats[pawnType].pawnSpawn[i].loc[0];\r\n                console.log(\"pawnStats[pawnType].pawnSpawn[i].loc\");\r\n                console.log(pawnStats[pawnType].pawnSpawn[i].loc);\r\n                console.log(\"pawnLoc\");\r\n                console.log(pawnLoc);\r\n\r\n                adjacentSpaces(pawnLoc, 1, null, pawnType, \"endRound\");\r\n            };\r\n\r\n            pawnTypeArr.push(pawnType);\r\n            pawnTypeTotal[pawnType] = pawnStats[pawnType].pawnSpawn.length;\r\n        };\r\n    };\r\n\r\n    for (let t = 0; t < pawnTypeArr.length; t++) {\r\n        console.log(\"pawnType before checkPawnStatus:\");\r\n        console.log(pawnTypeArr[t]);\r\n        checkPawnStatus(pawnTypeArr[t], pawnTypeTotal);\r\n    };\r\n\r\n    // let turnOrder = TODO: get info from browser? local storage?\r\n    return nextTurn(true, \"zombie\");\r\n};","// const adjacentSpaceFinder = require(\"./test-scripts/adj-space-finder\");\r\n// const adjacentSpaceFinder = require(\"./adjacent-spaces\");\r\n\r\nmodule.exports = enemyMoves = function (homespace, destin, movesMade, adjacentSpaceFinder) {\r\n    console.log(\"enemyMoves function fires\");\r\n\r\n    if (typeof movesMade == \"undefined\") {\r\n        console.log(\"movesMade was undefined\");\r\n        movesMade = [];\r\n    };\r\n\r\n    if (typeof destin == \"undefined\") {\r\n        console.log(\"Error: The destination exists beyond the dimensions of the board.\");\r\n    } else {\r\n        console.log(\"homespace\");\r\n        console.log(homespace);\r\n        console.log(\"destin\");\r\n        console.log(destin);\r\n        // adjacentSpaceFinder([101, 105], 1);\r\n\r\n        if (destin[0] === homespace[0] && destin[1] === homespace[1]) {\r\n            console.log(\"Congratulations, you've arrived!\");\r\n        } else {\r\n            // TODO: change all homespaces to be same camelCase or mention content string in name of variable:\r\n            homespace_ContentString = `content-x${homespace[0]}-y${homespace[1]}`;\r\n            adjArr = adjacentSpaceFinder(homespace_ContentString, 1, null, null, null);\r\n            last_Diff = null;\r\n            last_Arr = null;\r\n\r\n            for (let i = 0; i < adjArr.comb.length; i++) {\r\n\r\n                adjArr.comb[i] = adjArr.comb[i].match(/\\d+/g);\r\n                console.log(\"adjArr.comb[i] after regex match:\");\r\n                console.log(adjArr.comb[i]);\r\n\r\n                // x_Loc = homespace[0] = parseInt(homespace[0]);\r\n                // y_Loc = homespace[1] = parseInt(homespace[1]);\r\n\r\n                current_Array = [\r\n                    parseInt(adjArr.comb[i][0]), parseInt(adjArr.comb[i][1])\r\n                ];\r\n\r\n                console.log(\"current_Array\");\r\n                console.log(current_Array);\r\n\r\n                main_Diff = [\r\n                    destin[0] - homespace[0],\r\n                    destin[1] - homespace[1]\r\n                ];\r\n\r\n                current_Diff = [\r\n                    destin[0] - current_Array[0],\r\n                    destin[1] - current_Array[1]\r\n                ];\r\n\r\n                if (last_Diff == null) {\r\n                    last_Diff = main_Diff;\r\n                };\r\n\r\n                if (last_Arr == null) {\r\n                    console.log(\"last_Arr = homespace\");\r\n                    console.log(homespace);\r\n                    last_Arr = homespace;\r\n                };\r\n\r\n                if (destin[0] === current_Array[0] && destin[1] === current_Array[1]) {\r\n                    console.log(\"Done!\");\r\n                    last_Arr = current_Array;\r\n                    break;\r\n\r\n                    // negative difference:\r\n                } else if (current_Diff[0] < 0 || current_Diff[1] < 0) {\r\n                    console.log(`negative current difference: ${current_Diff}, current_Array = ${current_Array}`);\r\n                    if (current_Diff[0] >= last_Diff[0] && current_Diff[1] >= last_Diff[1]) {\r\n                        console.log(\"current_Diff: GREATER than\");\r\n\r\n                        last_Diff = current_Diff;\r\n                        last_Arr = current_Array;\r\n\r\n                    } else {\r\n                        console.log(\"else...\");\r\n                        last_Diff = last_Diff;\r\n                        last_Arr = last_Arr;\r\n                    };\r\n\r\n                    // negative difference:\r\n                } else if (current_Diff[0] > 0 || current_Diff[1] > 0) {\r\n                    console.log(`positive current difference: ${current_Diff}, current_Array = ${current_Array}`);\r\n                    if (current_Diff[0] <= last_Diff[0] && current_Diff[1] <= last_Diff[1]) {\r\n                        console.log(\"current_Diff: LESSER than\");\r\n\r\n                        last_Diff = current_Diff;\r\n                        last_Arr = current_Array;\r\n\r\n                    } else {\r\n                        console.log(\"else...\");\r\n                        last_Diff = last_Diff;\r\n                        last_Arr = last_Arr;\r\n                    };\r\n                };\r\n            };\r\n            movesMade.push(last_Arr);\r\n            console.log(\"homespace after movesMade push\");\r\n            console.log(homespace);\r\n\r\n            enemyMoves(last_Arr, destin, movesMade);\r\n        };\r\n        return movesMade;\r\n    };\r\n};","pawnStats = require(\"./pawn-stats\");\r\nhealthInfo = require(\"./health-info\");\r\n\r\n// this replaces nearbyPawn function:\r\nmodule.exports = friendOrFoe = function (homeSquare_ID, adjacentSquaresArr, pawnType) {\r\n    console.log(\"friendOrFoe function fires\");\r\n    // evaluates nearby (adjacent) spaces and check if contains \"empty-space\" class\r\n    // pawnType = \"human\"; // <<< testing ONLY (need to include other pawn types)\r\n\r\n    console.log(\"friendOrFoe function fires\");\r\n    console.log(\"adjacentSquaresArr\");\r\n    console.log(adjacentSquaresArr);\r\n\r\n    console.log(\"homeSquare_ID::\");\r\n    console.log(homeSquare_ID);\r\n\r\n    pawnId = document.getElementById(homeSquare_ID).childNodes[0].id;\r\n    var health = \"\";\r\n\r\n    for (let i = 0; i < adjacentSquaresArr.length; i++) {\r\n        destinationID = adjacentSquaresArr[i];\r\n\r\n        console.log(\"destinationID\");\r\n        console.log(destinationID);\r\n\r\n        spaceToCheck = document.getElementById(destinationID);\r\n        if (spaceToCheck != null) {\r\n\r\n            console.log(\"spaceToCheck\");\r\n            console.log(spaceToCheck);\r\n\r\n            if (spaceToCheck.classList.contains(\"empty-space\")) {\r\n                console.log(\"space is empty\");\r\n            } else {\r\n\r\n                console.log(\"spaceToCheck.childNodes[0]\");\r\n                console.log(spaceToCheck.childNodes[0]);\r\n\r\n                if (spaceToCheck.childNodes[0].classList.contains(\"human-pawn\")) {\r\n                    console.log(\"there's strength in numbers!\");\r\n\r\n                } else if (spaceToCheck.childNodes[0].classList.contains(\"zombie-pawn\")) {\r\n\r\n                    for (let i = 0; i < pawnStats.human.pawnSpawn.length; i++) {\r\n\r\n                        homePawnLoc = pawnStats.human.pawnSpawn[i].loc;\r\n\r\n                        console.log(\"homePawnLoc\");\r\n                        console.log(homePawnLoc);\r\n\r\n                        console.log(\"homeSquare_ID\");\r\n                        console.log(homeSquare_ID);\r\n\r\n                        if (homePawnLoc == homeSquare_ID) {\r\n                            console.log(\"they match!\");\r\n                            health = pawnStats.human.pawnSpawn[i].health - 10;\r\n                            // TODO: need to create a way to increase/decrease health of \"allies\" by proximity (use adjacentSpaces function):\r\n                            if (health > - 11 && health < 111) {\r\n\r\n                                pawnStats.human.pawnSpawn[i].health = health;\r\n                                console.log(spaceToCheck.childNodes[0].id);\r\n                                console.log(\"lastchild\");\r\n                                console.log(document.getElementById(homeSquare_ID).lastChild);\r\n                                healthInfo(pawnType, pawnId);\r\n                            };\r\n                            \r\n                        };\r\n                    };\r\n                    // TODO: get target piece's ID in pawnStats?\r\n                    // pass into updateStats function;\r\n                    // function initiated in conditional\r\n                    // multiplier if adjacent pawns are 'allies'... and adjacent to them.. and so on...\r\n                    console.log(\"CAUTION: the zombies are draining you too quickly!\");\r\n                } else if (spaceToCheck.childNodes[0].classList.contains(\"cyborg-pawn\")) {\r\n                    for (let i = 0; i < pawnStats.human.pawnSpawn.length; i++) {\r\n\r\n                        homePawnLoc = pawnStats.human.pawnSpawn[i].loc;\r\n\r\n                        console.log(\"homeSquare_ID\");\r\n                        console.log(homeSquare_ID);\r\n\r\n                        if (homePawnLoc == homeSquare_ID) {\r\n                            console.log(\"they match!\");\r\n                            health = pawnStats.human.pawnSpawn[i].health + 10;\r\n                            if (health > - 11 && health < 111) {\r\n\r\n                                pawnStats.human.pawnSpawn[i].health = health;\r\n                                console.log(spaceToCheck.childNodes[0].id);\r\n                                console.log(document.getElementById(homeSquare_ID).lastChild);\r\n                                healthInfo(pawnType, pawnId);\r\n                            };\r\n                        };\r\n                    };\r\n                    console.log(\"CAUTION: the cyborgs are healing you too quickly!\");\r\n                };\r\n            };\r\n        } else {\r\n            console.log(`destination space: ${destinationID} is out of the playable area`);\r\n        };\r\n\r\n        // weightedMove = require(\"./weightedMove\");\r\n        // weightedMove(enemyId, adjacentSquaresArr);\r\n    };\r\n};","pawnStats = require(\"./pawn-stats\");\r\nshowHealth = require(\"./show-health\");\r\ndynaFont = require(\"./dyna-font\");\r\n\r\n// function healthInfo(pawnType, pawnId) { \r\nmodule.exports = healthInfo = function (pawnType, pawnId) {\r\n    console.log(\"healthInfo function fires\");\r\n\r\n    pawnParent = document.getElementById(pawnId).parentNode;\r\n    if (pawnParent.childNodes[1] != null) {\r\n        pawnParent.removeChild(pawnParent.childNodes[1]);\r\n    };\r\n\r\n    // refreshPawn.removeChild(refreshPawn.childNodes[0]);\r\n\r\n    contentCornerHealth = document.createElement(\"div\");\r\n    contentHealthId = `content-health-${pawnId}`;\r\n    contentCornerHealth.setAttribute(\"id\", contentHealthId);\r\n    pawnParent.appendChild(contentCornerHealth);\r\n    healthCircle = document.getElementById(contentHealthId);\r\n    healthCircle.classList.add(\"empty-health\");\r\n    healthCircle.classList.add(\"health-score\");\r\n    // healthCircle.style.setProperty(`--health-font`, `'${healthFontSize}'`);\r\n\r\n    // get userNum and run function to create dynamic pixel size:\r\n    userNum = localStorage.getItem(\"boardSize\");\r\n    healthCircle.style.fontSize = `${dynaFont(userNum)}px`;\r\n    pawnParent.classList.remove(\"empty-space\");\r\n    console.log(\"contentCornerHealth\");\r\n    console.log(contentCornerHealth);\r\n\r\n    showHealth(pawnType, pawnId, healthCircle);\r\n\r\n    ///////////////////////////////////////////////////\r\n\r\n    // // console.log(pawnSpawn[pawnType].pawnSpawn.health);\r\n    // var newSpan = document.createElement(\"span\"); // Create span node\r\n    // var pawnSpawn = pawnStats[pawnType].pawnSpawn;\r\n    // for (let i = 0; i < pawnSpawn.length; i++) {\r\n    //     console.log(\"pawnSpawn[i]\");\r\n    //     console.log(pawnSpawn[i]);\r\n\r\n    //     console.log(\"pawnId\");\r\n    //     console.log(pawnId);\r\n    //     console.log(\"pawnSpawn[i].id\");\r\n    //     console.log(pawnSpawn[i].id);        \r\n\r\n    //     if (pawnSpawn[i].id == pawnId) {\r\n    //         healthNum = pawnSpawn[i].health;\r\n    //         var textnode = document.createTextNode(healthNum); // Create a text node\r\n    //         newSpan.appendChild(textnode); // Append the text to <li>\r\n    //         healthCircle.appendChild(newSpan);\r\n    //     };\r\n    // };\r\n};\r\n// exports.healthInfo = healthInfo;","module.exports = isSquare = function (num) {\r\n        return num > 4 && Math.sqrt(num) % 1 === 0;\r\n    };","module.exports = pawnStats = {\r\n    human: {\r\n        // pawnCounter: 0, // to be used with length in array of ids below\r\n        pawnSpawn: [\r\n            // {\r\n            //     dynaID: id\r\n            // }, // use constructor to assign values to each uniquely created and played pawn\r\n        ] // push objects into array of new pawns\r\n    },\r\n    zombie: {\r\n        // pawnCounter: 0, // to be used with length in array of ids below\r\n        pawnSpawn: []\r\n    },\r\n    cyborg: {\r\n        // pawnCounter: 0, // to be used with length in array of ids below\r\n        pawnSpawn: []\r\n    },\r\n\r\n    pawnCounter: 0,\r\n    // testing ONLY TODO: move into above^^^\r\n    pawnIdArray: {\r\n        human: [],\r\n        zombie: [],\r\n        cyborg: []\r\n    },\r\n    gameBoard: []\r\n};","const updatePawnStatus = require(\"./update-pawn-status\");\r\n\r\nmodule.exports = pawnSwitch = function (pawnToSwitch, pawnType) {\r\n    console.log(\"pawnSwitch function fires\");\r\n    console.log(\"pawnType in pawnSwitch:\");\r\n    console.log(pawnType);\r\n\r\n    // pawnIdArray = pawnStats.pawnIdArray[`${pawnType}`];\r\n\r\n    newPawn = document.getElementById(pawnToSwitch);\r\n    newPawn.src = `/assets/images/${pawnType}-pawn.png`;\r\n    // newPawn.classList.remove(\"empty-space\"); check for current class TODO: if contains\r\n    if (newPawn.classList.contains(\"human-pawn\")) {\r\n        newPawn.classList.remove(\"human-pawn\");\r\n        newPawn.classList.add(`${pawnType}-pawn`);\r\n\r\n        let pawnTypeSwitch = [\"human\", pawnType];\r\n\r\n        // remove location id from array of human and add to ${pawnType}:\r\n        // for (let i = 0; i < pawnStats.pawnIdArray.human.length; i++) {\r\n        //     console.log(newPawn.parentNode.id);\r\n        //     if (i === newPawn.parentNode.id) {\r\n        //         console.log(\"pawnStats.pawnIdArray.human\");\r\n        //         console.log(pawnStats.pawnIdArray.human);\r\n        //     }\r\n        // };\r\n        // for (let i = 0; i < pawnIdArray.length; i++) {\r\n        //     console.log(newPawn.parentNode.id);\r\n        //     if (i === newPawn.parentNode.id) {\r\n        //     console.log(\"pawnIdArray\");\r\n        //     console.log(pawnIdArray);\r\n        //     }\r\n        // };\r\n        updatePawnStatus(\"switch\", pawnToSwitch, pawnTypeSwitch);\r\n\r\n    } else if (newPawn.classList.contains(\"zombie-pawn\")) {\r\n        newPawn.classList.remove(\"zombie-pawn\");\r\n        newPawn.classList.add(`${pawnType}-pawn`);\r\n\r\n        let pawnTypeSwitch = [\"zombie\", pawnType];\r\n        updatePawnStatus(\"switch\", pawnToSwitch, pawnTypeSwitch);\r\n\r\n\r\n        // TODO: update stats (remove from type array/object and add to other array/object)\r\n        \r\n\r\n\r\n    } else if (newPawn.classList.contains(\"cyborg-pawn\")) {\r\n        newPawn.classList.remove(\"cyborg-pawn\");\r\n        newPawn.classList.add(`${pawnType}-pawn`);\r\n\r\n        let pawnTypeSwitch = [\"cyborg\", pawnType];\r\n        updatePawnStatus(\"switch\", pawnToSwitch, pawnTypeSwitch);\r\n\r\n    } else if (newPawn.classList.contains(\"sleepy-zombie-pawn\")) {\r\n        newPawn.classList.remove(\"sleepy-zombie-pawn\");\r\n        newPawn.classList.add(`${pawnType}-pawn`);\r\n\r\n        let pawnTypeSwitch = [\"sleepy-zombie-pawn\", pawnType];\r\n        updatePawnStatus(\"switch\", pawnToSwitch, pawnTypeSwitch);\r\n\r\n    } else if (newPawn.classList.contains(\"sleepy-cyborg-pawn\")) {\r\n        newPawn.classList.remove(\"sleepy-cyborg-pawn\");\r\n        newPawn.classList.add(`${pawnType}-pawn`);\r\n\r\n        let pawnTypeSwitch = [\"sleepy-cyborg-pawn\", pawnType];\r\n        updatePawnStatus(\"switch\", pawnToSwitch, pawnTypeSwitch);\r\n    };\r\n};\r\n\r\n// TODO: need to make pawns more generic. \r\n// change dynamic ids to counter, based on order of creation ONLY, not pawnType\r\n// the track all pawnTypes by either data- or class","pawnStats = require(\"./pawn-stats\");\r\n// const touchEvents = require(\"./test-scripts/touch-events\");\r\n\r\n// TODO: move this object into the playerStats object:\r\n// testing ONLY:\r\n// pawnIdArray = {\r\n//     human: [],\r\n//     zombie: [],\r\n//     cyborg: []\r\n// };\r\n\r\n\r\nmodule.exports = randomPlace = function (userInputNum, howManyToPlace) {\r\n    console.log(\"randomPlace function fires\");\r\n    let baseNum = 1000;\r\n    howManyToPlace = howManyToPlace * 2;\r\n\r\n    // TODO: need successfullyPlacedCounter in createPawn?\r\n\r\n    for (let i = 0; i <= howManyToPlace; i++) {\r\n        xAxis = Math.floor(Math.random() * userInputNum + 1);\r\n        console.log(\"xAxis\");\r\n        console.log(xAxis);\r\n\r\n        yAxis = Math.floor(Math.random() * userInputNum + 1);\r\n        console.log(\"yAxis\");\r\n        console.log(yAxis);\r\n\r\n        randomContentID = `content-x${baseNum + xAxis}-y${baseNum + yAxis}`;\r\n        console.log(\"randomContentID\");\r\n        console.log(randomContentID);\r\n\r\n        if (pawnStats.pawnIdArray.human.includes(randomContentID) ||\r\n            pawnStats.pawnIdArray.zombie.includes(randomContentID) ||\r\n            pawnStats.pawnIdArray.cyborg.includes(randomContentID)) {\r\n            console.log(\"that random number already exists in array. pawn was placed\");\r\n            // need to subtract from loop counter if already exists:\r\n            i--;\r\n\r\n        } else {\r\n            if (i % 2 === 0) { // even\r\n                pawnStats.pawnIdArray.human.push(randomContentID);\r\n                console.log(pawnStats.pawnIdArray.human);\r\n                createPawn(randomContentID, pawnStats.pawnCounter, \"human\");\r\n            \r\n            } else {\r\n                randEnemy = Math.floor(Math.random() * 20 + 1);\r\n                if (randEnemy % 2 === 0) {\r\n                    pawnStats.pawnIdArray.zombie.push(randomContentID);\r\n                    console.log(pawnStats.pawnIdArray.zombie);\r\n                    createPawn(randomContentID, pawnStats.pawnCounter, \"zombie\");\r\n                \r\n                } else {\r\n                    pawnStats.pawnIdArray.cyborg.push(randomContentID);\r\n                    console.log(pawnStats.pawnIdArray.cyborg);\r\n                    createPawn(randomContentID, pawnStats.pawnCounter, \"cyborg\");\r\n                };\r\n            };\r\n        };\r\n\r\n        // TODO: add openSpace evaluator that looks at array of spaces to see if contains beforeattempting to createPawn;\r\n        // TODO: create pawnHealth evaluator to track and determine status of pawns in danger of becoming neutral and changes color;\r\n        // TODO: pawn colors need to be changed to primary colors, so that the neutral stauts of pawns' colors can change to secondary colors;\r\n        // TODO: add blinking strobe effect to neutral pawns? add hover over arrow effect when pawn is picked up?\r\n    };\r\n    // touchEvents();\r\n};","pawnStats = require(\"./pawn-stats\");\r\n\r\nmodule.exports = showHealth = function (pawnType, pawnId, healthCircle) {\r\n    console.log(\"showHealth function fires\");\r\n\r\n    var newSpan = document.createElement(\"span\"); // Create span node\r\n    var pawnSpawn = pawnStats[pawnType].pawnSpawn;\r\n\r\n    for (let i = 0; i < pawnSpawn.length; i++) {\r\n        console.log(\"pawnSpawn[i]\");\r\n        console.log(pawnSpawn[i]);\r\n\r\n        console.log(\"pawnId\");\r\n        console.log(pawnId);\r\n        console.log(\"pawnSpawn[i].id\");\r\n        console.log(pawnSpawn[i].id);\r\n\r\n        if (pawnSpawn[i].id == pawnId) {\r\n            if (textnode != null) {\r\n                newSpan.removeChild(textnode);\r\n            };\r\n\r\n            healthNum = pawnSpawn[i].health;\r\n            var textnode = document.createTextNode(healthNum); // Create a text node\r\n            newSpan.appendChild(textnode);\r\n            healthCircle.appendChild(newSpan);\r\n        };\r\n    };\r\n};","\r\nmodule.exports = adjContentIDStringArr = function (homespace, adjacentSpaceObj, availableMoves) {\r\n    const firstSquare = {};\r\n    const adjacentSquares = [];\r\n\r\n    firstSquare.x = 1001;\r\n    firstSquare.y = 1001;\r\n\r\n    // if (pawnStats.gameBoard[0].includes())\r\n    // lastSquare.x = 1001;\r\n    // lastSquare.y = 1001;\r\n\r\n    //     // baseNum = 1000;\r\n    //     let numberOfSpaces = localStorage.getItem(\"boardSize\");\r\n    //     console.log(\"square root of \" + numberOfSpaces);\r\n\r\n    //     let sqRootNum = Math.sqrt(numberOfSpaces);\r\n    //     console.log(sqRootNum);\r\n\r\n    //     for (let i = 1; i <= sqRootNum; i++) {\r\n    //         for (let j = 1; j <= sqRootNum; j++) {\r\n    //         }\r\n    //     };\r\n\r\n\r\n    let loopSize = availableMoves * 2 + 1;\r\n\r\n    for (let i = 0; i < loopSize; i++) {\r\n        coord_x = adjacentSpaceObj.x[i]; // ???\r\n\r\n        for (let j = 0; j < loopSize; j++) {\r\n            coord_y = adjacentSpaceObj.y[j]; // ???\r\n            // contentID = [coord_x, coord_y];\r\n            contentID = `content-x${coord_x}-y${coord_y}`;\r\n            console.log(\"contentID\");\r\n            console.log(contentID);\r\n            console.log(\"homespace\");\r\n            console.log(homespace);\r\n            console.log(\"coord_x\");\r\n            console.log(coord_x);\r\n            console.log(\"coord_y\");\r\n            console.log(coord_y);\r\n            \r\n            if (coord_x >= firstSquare.x && coord_y >= firstSquare.y) {\r\n                if (coord_x === homespace[0] && coord_y === homespace[1]) {\r\n                // if (coord_x === parseInt(homespace[0]) && coord_y === parseInt(homespace[1])) {\r\n                    // console.log(`homespace_idString: ${contentID}`);\r\n                } else {\r\n                    // console.log(`${contentID} != ${homespace_idString}`);\r\n                    adjacentSquares.push(contentID); // ???\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    console.log(\"adjacentSquares::\");\r\n    console.log(adjacentSquares);\r\n    adjacentSpaceObj.comb = adjacentSquares;\r\n\r\n    return adjacentSpaceObj;\r\n};","// const adjacentSquares = [];\r\nconst adjacentSpacesHolder = [];\r\n// const firstSquare = {};\r\n// firstSquare.x = 1;\r\n// firstSquare.y = 1;\r\nconst friendOrFoe = require(\"../friend-or-foe\");\r\nconst adjContentIDStringArr = require(\"./adj-contentID-string-array\");\r\nconst goldilocksChecker = require(\"./goldilocks-checker\");\r\n\r\n\r\nconst movesMade = [];\r\n\r\nmodule.exports = function adjacentSpaces (homespace, availableMoves, destination, pawnType, message) {\r\n    console.log(\"adjacentSpaces function fires\");\r\n\r\n    const adjacentSquares = [];\r\n\r\n//////////////////////////////////////////////////////////\r\n// TODO: export this into a function?\r\n\r\n    let homespace_idString = homespace;\r\n    console.log(\"homespace_idString\");\r\n    console.log(homespace_idString);\r\n    homespace = homespace.match(/\\d+/g);\r\n    console.log(\"homespace after match:\");\r\n    console.log(homespace);\r\n\r\n\r\n    let adjacentSpaceObj = {\r\n        homespace: homespace,\r\n        homespace_idString: homespace_idString,\r\n        x: [],\r\n        y: [],\r\n        comb: []\r\n    };\r\n\r\n    x_Loc = homespace[0] = parseInt(homespace[0]);\r\n    console.log(\"x_Loc\");\r\n    console.log(x_Loc);\r\n\r\n    y_Loc = homespace[1] = parseInt(homespace[1]);\r\n    console.log(\"y_Loc\");\r\n    console.log(y_Loc);\r\n\r\n//////////////////////////////////////////////////////////\r\n\r\n    for (let q = 0; q <= availableMoves; q++) {\r\n\r\n        if (q > 0) {\r\n            adjacentSpaceObj.x.push(\r\n                x_Loc + q,\r\n                x_Loc - q);\r\n\r\n            adjacentSpaceObj.y.push(\r\n                y_Loc + q,\r\n                y_Loc - q);\r\n        } else {\r\n            adjacentSpaceObj.x.push(x_Loc + q);\r\n            adjacentSpaceObj.y.push(y_Loc + q);\r\n        };\r\n    };\r\n\r\n    console.log(\"adjacentSpaceObj\");\r\n    console.log(adjacentSpaceObj);\r\n    \r\n//////////////////////////////////////////////////////////\r\n\r\nadjacentSpaceObj = adjContentIDStringArr(homespace, adjacentSpaceObj, availableMoves);\r\n\r\n    console.log(\"adjacentSpaceObj.comb\");\r\n    console.log(adjacentSpaceObj.comb);\r\n\r\n    if (message === \"endRound\") {\r\n        return friendOrFoe(homespace_idString, adjacentSpaceObj.comb, pawnType);\r\n    } else if (message === \"compTurn\") {\r\n        console.log(\"compTurn msg in adjSpacesFinder\");\r\n        return adjacentSpaceObj;\r\n    } else {\r\n        return adjacentSpaceObj;\r\n    }\r\n    // return friendOrFoe(idString, adjacentSquares, pawnType);\r\n};\r\n\r\n// let homeSpace = [3, 3];\r\n// let totNumMoves = 2;\r\n\r\n// adjacentSpaces(homeSpace, totNumMoves, null, null);","module.exports = bestMove = function (goldSpaceArr) {\r\n    console.log(\"bestMove function fires\");\r\n    console.log(goldSpaceArr);\r\n\r\n    let newGoldSpaceArr = {};\r\n\r\n    for (let g = 1; g < goldSpaceArr.length; g++) {\r\n\r\n        if (goldSpaceArr[g - 1].weight != null) {\r\n            if (goldSpaceArr[g].weight > goldSpaceArr[g - 1].weight) {\r\n                goldSpaceArr.splice((g - 1), 1);\r\n                console.log(\"g is bigger\");\r\n                console.log(goldSpaceArr);\r\n\r\n            } else if (goldSpaceArr[g].weight <= goldSpaceArr[g - 1].weight) {\r\n                goldSpaceArr.splice(g, 1);\r\n                console.log(\"g - 1 is bigger\");\r\n                console.log(goldSpaceArr);\r\n\r\n            };\r\n        };\r\n        newGoldSpaceArr = goldSpaceArr;\r\n    };\r\n    return newGoldSpaceArr;\r\n};","const pawnStats = require(\"../pawn-stats\");\r\nconst bestMove = require(\"./best-move\");\r\nconst adjacentSpaces = require(\"./adj-space-finder\");\r\nconst moveEnemyPawnFunc = require(\"./move-enemy-pawn-func\");\r\n\r\nmodule.exports = compTurn = function (computerBool, pawnType) {\r\n    ///////////////////////  call function to addWeight (adjSpaces) ///////////////////////\r\n\r\n    ///////////////////////  add weight value to each space in adjSpaces connected to pawnID ///////////////////////\r\n\r\n    ///////////////////////  replace lower weight value / keep higher weight with spaceID ///////////////////////\r\n\r\n    console.log(\"nextTurn function fires\");\r\n    console.log(\"computerBool\");\r\n    console.log(computerBool);\r\n    console.log(\"pawnType\");\r\n    console.log(pawnType);\r\n\r\n    let currentGoldiPawns = [];\r\n    let goldilocksObjectHolder = {};\r\n    let goldSpaceArr = [];\r\n    let moveEnemyPawn = {};\r\n\r\n    if (computerBool === true) {\r\n        console.log(\"pawnStats[pawnType].pawnSpawn.length\");\r\n        console.log(pawnStats[pawnType].pawnSpawn.length);\r\n\r\n        // TODO: create an if conditional that errors out if the pawnType doesn't exist or equals zero:\r\n\r\n        ///////////////////////  loop through pawnIDs ///////////////////////\r\n        for (let loop = 0; loop < pawnStats[pawnType].pawnSpawn.length; loop++) {\r\n            let currentPawnLoc = pawnStats[pawnType].pawnSpawn[loop].loc;\r\n            let currentPawnID = pawnStats[pawnType].pawnSpawn[loop].id;\r\n\r\n            /////////////////////// 1) get pawnIDs ///////////////////////\r\n            console.log(\"currentPawnID\");\r\n            console.log(currentPawnID);\r\n\r\n            console.log(\"currentPawnLoc\");\r\n            console.log(currentPawnLoc);\r\n\r\n            ///////////////////////  get adjacentSpaces from each pawnID ///////////////////////\r\n            let currentAdjSpaceArr = adjacentSpaces(currentPawnLoc[0], 1, null, pawnType, \"compTurn\");\r\n\r\n            ///////////////////////  loop through adjacentSpaces ///////////////////////\r\n            // for (let cur = 0; cur < currentAdjSpaceArr.comb.length; cur++) {\r\n            //     console.log(goldilocksChecker()); // homeSpace, targetSpace, pawnType\r\n            // }\r\n\r\n            // currentGoldiPawns.pawnID = currentPawnID;\r\n            // currentGoldiPawns.pawnLoc = currentPawnLoc;\r\n            // currentGoldiPawns.adjSpaceArray = currentAdjSpaceArr.comb;\r\n\r\n            for (let adj = 0; adj < currentAdjSpaceArr.comb.length; adj++) {\r\n                console.log(\"before goldilocksChecker is called\");\r\n                console.log(`currentAdjSpaceArr.comb.length = ${currentAdjSpaceArr.comb.length}`);\r\n\r\n                let targetSpace_idString = currentAdjSpaceArr.comb[adj];\r\n                let targetSpace = targetSpace_idString;\r\n\r\n                console.log(\"targetSpace_idString\");\r\n                console.log(targetSpace_idString);\r\n                targetSpace = targetSpace.match(/\\d+/g);\r\n                console.log(\"targetSpace after match:\");\r\n                console.log(targetSpace);\r\n                targetSpace = [parseInt(targetSpace[0]), parseInt(targetSpace[1])];\r\n\r\n                //////////////////////////////////////////////////////////////////////////\r\n\r\n                let currentPawnHomespace_idString = currentPawnLoc[0];\r\n                let currentTargetElem = document.getElementById(targetSpace_idString);\r\n                let currentPawnHomespace = currentPawnHomespace_idString;\r\n\r\n                if (currentTargetElem != null) {\r\n                    if (!currentTargetElem.classList.contains(\"empty-space\")) {\r\n                        console.log(\"currentTargetElem is NOT an empty space:\");\r\n                        console.log(currentTargetElem);\r\n                    } else {\r\n                        console.log(\"currentTargetElem is an empty space:\");\r\n                        console.log(currentTargetElem);\r\n\r\n                        console.log(\"currentPawnHomespace_idString\");\r\n                        console.log(currentPawnHomespace_idString);\r\n                        currentPawnHomespace = currentPawnHomespace.match(/\\d+/g);\r\n                        console.log(\"currentPawnHomespace after match:\");\r\n                        console.log(currentPawnHomespace);\r\n                        currentPawnHomespace = [parseInt(currentPawnHomespace[0]), parseInt(currentPawnHomespace[1])];\r\n\r\n                        // console.log(goldilocksChecker(currentPawnHomespace, targetSpace, pawnType, adjacentSpaces, currentPawnHomespace_idString)); // homeSpace, targetSpace, pawnType\r\n                        // create a function to compare returned values:\r\n                        goldilocksObjectHolder = goldilocksChecker(currentPawnHomespace, targetSpace, pawnType, adjacentSpaces, currentPawnHomespace_idString);\r\n                        goldSpaceArr.push(goldilocksObjectHolder);\r\n\r\n                        console.log(\"goldSpaceArr (before):\");\r\n                        console.log(goldSpaceArr);\r\n\r\n                        if (goldSpaceArr.length > 1) {\r\n                            console.log(\"bestMove(goldSpaceArr):\");\r\n                            moveEnemyPawn = bestMove(goldSpaceArr);\r\n                        };\r\n\r\n                        console.log(\"goldSpaceArr (after):\");\r\n                        console.log(goldSpaceArr);\r\n                    };\r\n                };\r\n            };\r\n            //////////////////////////////////////////////////////////////////////////\r\n\r\n            console.log(\"moveEnemyPawn[0].homespace_idString\");\r\n            console.log(moveEnemyPawn[0].homespace_idString);\r\n            console.log(\"moveEnemyPawn[0].targetSpace_idString\");\r\n            console.log(moveEnemyPawn[0].targetSpace_idString);\r\n\r\n            // TODO: check after each \"zombie\" bestMove\r\n            moveEnemyPawnFunc(moveEnemyPawn[0].homespace_idString, moveEnemyPawn[0].targetSpace_idString);\r\n            \r\n            // return moveEnemyPawnFunc(moveEnemyPawn); TODO: break apart in next function, not here ^^^\r\n        };\r\n\r\n    } else {\r\n        console.log(`computerBool is ${computerBool}`);\r\n    };\r\n};\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\n// need TODO: create a function to change to contentID string and reverse:\r\n\r\n// let homespace_idString = homespace;\r\n// console.log(\"homespace_idString\");\r\n// console.log(homespace_idString);\r\n// homespace = homespace.match(/\\d+/g);\r\n// console.log(\"homespace after match:\");\r\n// console.log(\"currentGoldiPawns\");\r\n// console.log(currentGoldiPawns);\r\n// };","const enemyMoves = require(\"../enemy-moves\");\r\nconst Goldilocks = require(\"./goldilocks-constructor\");\r\nconst rateSpace = require(\"./rate-space\");\r\nconst pawnStats = require(\"../pawn-stats\");\r\n\r\n// const adjSpaceFinder = require(\"./adj-space-finder\");\r\n\r\nmodule.exports = goldilocksChecker = function (homeSpace, targetSpace, pawnType, adjSpaceFinder, homespace_idString) {\r\n    console.log(\"goldilocksChecker function fires\");\r\n    // calculate distance:\r\n    console.log(\"homeSpace::\");\r\n    console.log(homeSpace);\r\n    console.log(\"targetSpace::\");\r\n    console.log(targetSpace);\r\n\r\n    let movesMade = [];\r\n    let movesArray = enemyMoves(homeSpace, targetSpace, movesMade, adjSpaceFinder);\r\n    console.log(\"movesArray:\");\r\n    console.log(movesArray.length);\r\n    let distance = movesArray.length * -1;\r\n\r\n    console.log(\"distance\");\r\n    console.log(distance);\r\n\r\n    let weightHolder = {\r\n        cyborg: [],\r\n        human: [],\r\n        zombie: [],\r\n        empty: [],\r\n        emptyElem: []\r\n    };\r\n\r\n    let targetSpace_ContentString = `content-x${targetSpace[0]}-y${targetSpace[1]}`;\r\n    let targetAdjArr = adjSpaceFinder(targetSpace_ContentString, 1);\r\n    console.log(\"targetAdjArr\");\r\n    console.log(targetAdjArr);\r\n    // for (let adj = 0; adj < 3; adj++) { // test: infinite loop?\r\n    for (let adj = 0; adj < targetAdjArr.comb.length; adj++) {\r\n        console.log(\"targetAdjArr.comb[adj]\");\r\n        console.log(targetAdjArr.comb[adj]);\r\n\r\n        let targetIndexVal = targetAdjArr.comb[adj];\r\n        // \"x1005-y1005\"\r\n\r\n        console.log(\"pawnStats.gameBoard\");\r\n        console.log(pawnStats.gameBoard);\r\n        console.log(\"targetIndexVal\");\r\n        console.log(targetIndexVal);\r\n\r\n        if (pawnStats.gameBoard.includes(targetIndexVal)) {\r\n            console.log(\"exists on gameBoard\");\r\n            let evalTargetDiv = document.getElementById(targetIndexVal);\r\n\r\n            if (evalTargetDiv.classList.contains(\"empty-space\")) {\r\n                console.log(evalTargetDiv);\r\n                console.log(`The above is an empty space.`);\r\n                weightHolder.empty.push(targetIndexVal); // add enemy/friend weights - TODO:\r\n                weightHolder.emptyElem.push(evalTargetDiv); // add enemy/friend weights - TODO:\r\n\r\n            } else if (targetIndexVal == homespace_idString) {\r\n                console.log(evalTargetDiv);\r\n                console.log(`The above is SELF.`);\r\n\r\n            } else {\r\n                if (evalTargetDiv.childNodes[0].classList.contains(\"cyborg-pawn\")) {\r\n                    console.log(`cyborg-pawn`);\r\n                    weightHolder.cyborg.push(targetIndexVal); // add enemy/friend weights\r\n                } else if (evalTargetDiv.childNodes[0].classList.contains(\"human-pawn\")) {\r\n                    console.log(`human-pawn`);\r\n                    weightHolder.human.push(targetIndexVal);\r\n                } else if (evalTargetDiv.childNodes[0].classList.contains(\"zombie-pawn\")) {\r\n                    console.log(`zombie-pawn`);\r\n                    weightHolder.zombie.push(targetIndexVal);\r\n                } else {\r\n                    console.log(`else`);\r\n                };\r\n            };\r\n        };\r\n    };\r\n    // for (let adj = 0; adj < targetAdjArr.comb.length; adj++) {\r\n    //     if (pawnType === targetAdjArr.comb[adj].id) {\r\n    //         console.log(`${pawnType} matches ${targetAdjArr.comb[adj].id}`);\r\n    //     } else {\r\n    //         console.log(`${pawnType} doesn't match ${targetAdjArr.comb[adj].id}`);\r\n    //     };\r\n    // };\r\n\r\n    let food = 2 * weightHolder.human.length;\r\n    let friend = 5 * weightHolder.zombie.length; // testing ONLY\r\n    let enemy = -10 * weightHolder.cyborg.length; // testing ONLY\r\n\r\n\r\n    let goldSpace = new Goldilocks(\r\n        pawnType,\r\n        distance,\r\n        food,\r\n        friend,\r\n        enemy,\r\n        homeSpace,\r\n        homespace_idString,\r\n        targetSpace,\r\n        targetSpace_ContentString,\r\n        rateSpace\r\n    );\r\n\r\n    goldSpace.weightHolder = weightHolder;\r\n    console.log(\"goldSpace.weightHolder.empty\");\r\n    console.log(goldSpace.weightHolder.empty);\r\n    console.log(`goldSpace.weightHolder.cyborg.length = ${goldSpace.weightHolder.cyborg.length}`);\r\n    console.log(`goldSpace.weightHolder.human.length = ${goldSpace.weightHolder.human.length}`);\r\n    console.log(`goldSpace.weightHolder.zombie.length = ${goldSpace.weightHolder.zombie.length}`);\r\n    console.log(\"goldSpace:\");\r\n    console.log(goldSpace);\r\n\r\n    return goldSpace; // return totalWeight of space and then replace based on other returns\r\n};","const rateSpace = require(\"./rate-space\");\r\n\r\nmodule.exports = Goldilocks = function (type, move, food, friend, enemy, homeSpace, homespace_idString, targetSpace, targetSpace_idString, rateSpace) {\r\n\r\n    this.move = move;\r\n    this.food = food;\r\n    this.friend = friend;\r\n    this.enemy = enemy;\r\n    this.type = type;\r\n    this.homeSpace = homeSpace;\r\n    this.homespace_idString = homespace_idString;\r\n    this.targetSpace = targetSpace;\r\n    this.targetSpace_idString = targetSpace_idString;\r\n    this.weight = rateSpace(\r\n        move,\r\n        food,\r\n        friend,\r\n        enemy\r\n    );\r\n};","module.exports = moveEnemyPawnFunc = function (oldSpaceID, newSpaceID) {\r\n    console.log(\"moveEnemyPawnFunc function fires\");\r\n    \r\n    let parentDiv = document.getElementById(oldSpaceID);\r\n    parentDiv.classList.add(\"parent-holding-pawn\");\r\n    let currentPawnHeld = parentDiv.childNodes[0].id;\r\n    let holdingClass = document.getElementById(currentPawnHeld);\r\n    holdingClass.classList.add(\"holding\");\r\n    \r\n    /////////////////////////////////////////////////////////////////////\r\n\r\n    let newEnemySpace = document.getElementById(newSpaceID);\r\n    newEnemySpace.appendChild(holdingClass);\r\n    holdingClass.classList.remove(\"holding\");\r\n    newEnemySpace.classList.remove(\"empty-space\");\r\n    parentDiv.classList.remove(\"parent-holding-pawn\");\r\n    parentDiv.classList.add(\"empty-space\");\r\n    holdingPawn = false;\r\n\r\n    /////////////////////////////////////////////////////////////////////\r\n\r\n    let contentCircle = document.getElementById(`content-health-${currentPawnHeld}`);\r\n    newEnemySpace.appendChild(contentCircle);\r\n\r\n    /////////////////////////////////////////////////////////////////////\r\n\r\n    let newParentDiv_ID = newSpaceID;\r\n\r\n    console.log(\"newParentDiv_ID\");\r\n    console.log(newParentDiv_ID);\r\n\r\n    updatePawnStatus(\"location\", currentPawnHeld, newParentDiv_ID);\r\n    currentPawnHeld = null;\r\n};","module.exports = rateSpace = function (move, food, friend, enemy) {\r\n    console.log(\"rateSpace method fires\");\r\n\r\n    let weight = move + food + friend + enemy;\r\n\r\n    console.log(\"weight\");\r\n    console.log(weight);\r\n\r\n    return weight;\r\n};","module.exports = touchEvents = function () {\r\n    console.log(\"touchEvents function fires\");\r\n\r\n    var currentPawnHeld = null;\r\n\r\n    /* Event fired on the touch target */\r\n    touchStart = function (event) {\r\n        if (event.target.classList.contains(\"human-pawn\")) {\r\n            // event.dataTransfer.getData(\"Text\", event.target.id);\r\n            holdingPawn = true;\r\n            currentPawnHeld = event.target.id;\r\n\r\n            let holdingClass = document.getElementById(currentPawnHeld);\r\n            holdingClass.classList.add(\"holding\");\r\n            parentDiv = document.getElementById(currentPawnHeld).parentNode;\r\n            parentDiv.classList.add(\"parent-holding-pawn\");\r\n        } else {\r\n            event.target.removeEventListener(\"dragstart\", dragStart);\r\n            // document.getElementById(\"myDIV\").\r\n            // document.getElementById(\"myDIV\").removeEventListener(\"mousemove\", myFunction);\r\n        };\r\n\r\n        // });\r\n    };\r\n    document.addEventListener(\"touchstart\", touchStart);\r\n\r\n    var holdingPawn = false;\r\n    var holdingClass = null;\r\n    var parentDiv = null;\r\n    var counterValue = 0;\r\n\r\n\r\n    /* Event fired on the touchmove target */\r\n    document.addEventListener(\"touchmove\", function (event) {\r\n        // event.preventDefault();\r\n        console.log(\"touchmove\");\r\n        console.log(\"holdingPawn: \" + holdingPawn);\r\n        console.log(counterValue);\r\n        counterValue++;\r\n    });\r\n\r\n    // Events fired on the drop target:\r\n    document.addEventListener(\"touchend\", function (event) {\r\n        // event.preventDefault();\r\n\r\n        console.log(\"currentPawnHeld\");\r\n        console.log(currentPawnHeld);\r\n\r\n        if (currentPawnHeld != null) {\r\n            if (document.getElementById(currentPawnHeld).classList.contains(\"human-pawn\")) {\r\n                console.log(\"currentPawnHeld = human-pawn\");\r\n\r\n                if (event.target.classList.contains(\"empty-space\")) {\r\n                    // var data = event.dataTransfer.setData(\"Text\");\r\n                    holdingClass = document.getElementById(currentPawnHeld);\r\n                    event.target.appendChild(holdingClass);\r\n                    holdingClass.classList.remove(\"holding\");\r\n                    event.target.classList.remove(\"empty-space\");\r\n                    parentDiv.classList.remove(\"parent-holding-pawn\");\r\n                    parentDiv.classList.add(\"empty-space\");\r\n                    holdingPawn = false;\r\n\r\n                    /////////////////////////////////////////////////////\r\n                    contentCircle = document.getElementById(`content-health-${currentPawnHeld}`);\r\n                    event.target.appendChild(contentCircle);\r\n                    /////////////////////////////////////////////////////\r\n\r\n                    newParentDiv_ID = event.target.id;\r\n                    console.log(\"newParentDiv_ID\");\r\n                    console.log(newParentDiv_ID);\r\n\r\n                    updatePawnStatus(\"location\", currentPawnHeld, newParentDiv_ID);\r\n                    currentPawnHeld = null;\r\n\r\n                    console.log(\"parentDiv\");\r\n                    console.log(parentDiv);\r\n                    console.log(\"parentDiv.id\");\r\n                    console.log(parentDiv.id);\r\n                    console.log(\"contentCornerHealth\");\r\n                    console.log(contentCornerHealth);\r\n\r\n                    /////////////////////////////////////////////////////\r\n\r\n                } else if (event.target.classList.contains(\"empty-space\") == false) {\r\n                    console.log(\"this slot is full\");\r\n                } else {\r\n                    holdingClass.classList.remove(\"holding\");\r\n                    parentDiv.classList.remove(\"parent-holding-pawn\");\r\n                    parentDiv.classList.remove(\"empty-space\");\r\n                    holdingPawn = false;\r\n                    currentPawnHeld = null;\r\n                };\r\n            } else {\r\n                console.log(\"currentPawnHeld not human-pawn\");\r\n            };\r\n        };\r\n    });\r\n};","module.exports = updatePercent = function (pawnTypeTotal) {\r\n    console.log(\"updatePercent function fires:\");\r\n    \r\n    console.log(pawnTypeTotal);\r\n    let pawnTypeTotalCount = pawnTypeTotal.cyborg + pawnTypeTotal.human + pawnTypeTotal.zombie;\r\n\r\n    let cyborgBar = document.getElementById(\"cyborg-bar\");\r\n    let humanBar = document.getElementById(\"human-bar\");\r\n    let zombieBar = document.getElementById(\"zombie-bar\");\r\n\r\n    let cybPerText = document.getElementById(\"cyborg-percentage\");\r\n    let humPerText = document.getElementById(\"human-percentage\");\r\n    let zomPerText = document.getElementById(\"zombie-percentage\");\r\n\r\n    // set CSS property for percentages:\r\n    cyborgBar.style.setProperty(\"--cyborg-health\", (pawnTypeTotal.cyborg / pawnTypeTotalCount) * 100 + \"%\");\r\n    humanBar.style.setProperty(\"--human-health\", (pawnTypeTotal.human / pawnTypeTotalCount) * 100 + \"%\");\r\n    zombieBar.style.setProperty(\"--zombie-health\", (pawnTypeTotal.zombie / pawnTypeTotalCount) * 100 + \"%\");\r\n\r\n    // set inner text for percentages:\r\n    cybPerText.innerHTML = ((pawnTypeTotal.cyborg / pawnTypeTotalCount) * 100).toFixed();\r\n    humPerText.innerHTML = ((pawnTypeTotal.human / pawnTypeTotalCount) * 100).toFixed();\r\n    zomPerText.innerHTML = ((pawnTypeTotal.zombie / pawnTypeTotalCount) * 100).toFixed();\r\n};","pawnStats = require(\"./pawn-stats\");\r\n\r\nmodule.exports = updatePawnStatus = function (string, pawnID, newParentID) {\r\n    console.log(`updatePawnStatus function fires with string = ${string}`);\r\n    console.log(\"pawnID:\");\r\n    console.log(pawnID);\r\n    console.log(\"pawnStats\");\r\n    console.log(pawnStats);\r\n    let pawnType = \"\";\r\n\r\n    // \"switch\" pawn type (pawn-switch):\r\n\r\n    if (string === \"switch\") {\r\n        console.log(\"switch!\");\r\n        // console.log(\"return object:\");\r\n        console.log(\"pawnID in updatePawnStatus: 'switch'\");\r\n        console.log(pawnID);\r\n        let pawnTypeSwitch = newParentID; // TODO: need to change variable argument to reflect the various possible arguments to be passed in.\r\n        let pawnElem = document.getElementById(pawnID);\r\n        console.log(\"pawnElem\");\r\n        console.log(pawnElem);\r\n        console.log(\"pawnTypeSwitch\");\r\n        console.log(pawnTypeSwitch);\r\n\r\n        let typeBefore = pawnTypeSwitch[0];\r\n        let typeAfter = pawnTypeSwitch[1];\r\n\r\n        let pawnStat_Type = pawnStats[typeBefore]; //  <==== pawnType???\r\n        let allPawnSpawn = pawnStat_Type.pawnSpawn;\r\n\r\n        console.log(\"allPawnSpawn?\");\r\n        console.log(allPawnSpawn);\r\n\r\n        for (let index = 0; index < allPawnSpawn.length; index++) {\r\n\r\n            console.log(allPawnSpawn[index].id);\r\n\r\n            if (allPawnSpawn[index].id == pawnID) {\r\n\r\n                let indexToDelete = index;\r\n                let pawnSpawnHolder = allPawnSpawn[index];\r\n\r\n                allPawnSpawn.splice(indexToDelete, 1);\r\n\r\n                pawnStats[typeAfter].pawnSpawn.push(pawnSpawnHolder);\r\n\r\n                console.log(`before?`);\r\n                console.log(pawnStats[typeBefore]);\r\n                console.log(`after?`);\r\n                console.log(pawnStats[typeAfter]);\r\n            };\r\n        };\r\n\r\n\r\n        //     if (pawnID == allPawnSpawn[i].loc) {\r\n        //         console.log(`${allPawnSpawn[i].id} equals pawnID`);\r\n        //     };\r\n        // };\r\n\r\n        // if (\r\n        //     pawn_Type === \"cyborg\" ||\r\n        //     pawn_Type === \"human\" ||\r\n        //     pawn_Type === \"zombie\"\r\n        // ) {\r\n\r\n\r\n        // \"location\" swap (drag-and-drop):\r\n    } else if (string === \"location\") {\r\n        let pawnElem = document.getElementById(pawnID);\r\n\r\n        if (pawnElem.classList.contains(\"cyborg-pawn\")) {\r\n            console.log(\"cyborg-pawn\");\r\n            cyborgSpawn = pawnStats.cyborg.pawnSpawn;\r\n\r\n            // TODO: update location: \r\n            for (let z = 0; z < cyborgSpawn.length; z++) {\r\n                if (cyborgSpawn[z].id == pawnID) {\r\n                    console.log(`cyborg- ${pawnID} -found!`); // TODO: use this to find and change class/race\r\n                    console.log(`cyborg location was: ${cyborgSpawn[z].loc}.`);\r\n\r\n                    cyborgSpawn[z].loc[0] = newParentID;\r\n                    console.log(`cyborg location now is: ${cyborgSpawn[z].loc}.`);\r\n                };\r\n            };\r\n            // TODO: update race: \r\n            // TODO: update health?: Already done! Link it!\r\n\r\n        } else if (pawnElem.classList.contains(\"human-pawn\")) {\r\n            console.log(\"human-pawn\");\r\n            humanSpawn = pawnStats.human.pawnSpawn;\r\n\r\n            // TODO: update location: \r\n            for (let z = 0; z < humanSpawn.length; z++) {\r\n                if (humanSpawn[z].id == pawnID) {\r\n                    console.log(`human- ${pawnID} -found!`); // TODO: use this to find and change class/race\r\n                    console.log(`human location was: ${humanSpawn[z].loc}.`);\r\n\r\n                    humanSpawn[z].loc[0] = newParentID;\r\n                    console.log(`human location now is: ${humanSpawn[z].loc}.`);\r\n                };\r\n            };\r\n            // TODO: update race: \r\n            // TODO: update health?: Already done! Link it!\r\n\r\n        } else if (pawnElem.classList.contains(\"zombie-pawn\")) {\r\n            console.log(\"zombie-pawn\");\r\n            zombieSpawn = pawnStats.zombie.pawnSpawn;\r\n\r\n            // TODO: update location: \r\n            for (let z = 0; z < zombieSpawn.length; z++) {\r\n                if (zombieSpawn[z].id == pawnID) {\r\n                    console.log(`zombie- ${pawnID} -found!`); // TODO: use this to find and change class/race\r\n                    console.log(`zombie location was: ${zombieSpawn[z].loc}.`);\r\n\r\n                    zombieSpawn[z].loc[0] = newParentID;\r\n                    console.log(`zombie location now is: ${zombieSpawn[z].loc}.`);\r\n                };\r\n            };\r\n            // TODO: update race: \r\n            // TODO: update health?: Already done! Link it! \r\n        };\r\n    };\r\n\r\n    // testing ONLY:\r\n    // let pawnSpawn = pawnStats[pawnType]\r\n    // humanPawnSpawn = pawnStats[pawnType].pawnSpawn;\r\n};"],"sourceRoot":""}